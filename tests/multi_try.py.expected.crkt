#lang racket

(require racket/mpair)

(define-syntax (program stx)
  (syntax-case stx ()
    [(_ defs ... exp)
     (with-syntax ([$halt (datum->syntax #'exp '$halt)])
       #'(call/ec (λ ($halt) defs ... exp)))]))



;; Data structures.
(define-syntax dict
  (syntax-rules ()
    [(_ (k v) ...)
     ; =>
     (make-hash (list (cons k v) ...))]))

(define dict? hash?)
(define dict-ref hash-ref)
(define dict-set! hash-set!)

(define-syntax tuple
  (syntax-rules ()
    [(_ v ...)
     ; =>
     (vector v ...)]))

(define tuple-ref vector-ref)
(define tuple-set! vector-set!)
(define tuple? vector?)


(define (mlist-set! mlst n value)
  (cond
    [(null? mlst)  (error "mlist-set! -- index too high")]
    [(= n 0)       (set-mcar! mlst value)]
    [else          (mlist-set! (mcdr mlst) (- n 1) value)]))

(define (mlist-remove! mlst n)
  (cond
    [(null? mlist) (error "cannot delete from empty list")]
    [(= n 1)       (set-mcdr! mlst (mcdr (mcdr mlst)))]
    [else          (mlist-remove! (mcdr mlst) (- n 1))]))

     
(define-struct py-list ([mlist #:mutable]))

(define (py-list-set! pl i val)
  (mlist-set! (py-list-mlist pl) i val))

(define (py-list-ref pl i)
  (mlist-ref (py-list-mlist pl) i))

(define (py-list-remove! pl i)
  (cond
    [(< i 0)  (error "index out of bounds for removal")]
    [(= i 0)  (set-py-list-mlist! (mcdr (py-list-mlist pl)))]
    [else     (mlist-remove! (py-list-mlist pl) i)]))
     
(define (py-list* . args)
  (py-list (list->mlist args)))

;; Iterators.
(define (for-list-k lst f k)
  (letrec ([loop (λ (lst)
    (if (null? lst)
        (k (void))
        (f (car lst) (λ (_)
          (loop (cdr lst))))))])
    (loop lst)))
  
(define (set->list set)
  (for/list ([v set]) v))

(define (tuple->list tuple)
  (for/list ([v tuple]) v))

(define (py-list->list lst)
  (for/list ([v (py-list-mlist lst)]) v))

(define (dict->keys dict)
  (for ([(k _) dict]) k))


(define (for-set-k set f k)
  (for-list-k (set->list set) f k))
  
(define (for-tuple-k tuple f k)
  (for-list-k (tuple->list tuple) f k))
  
(define (for-py-list-k py-list f k)
  (for-list-k (py-list->list py-list) f k))

(define (for-dict-k dict f k)
  (for-list-k (dict->keys dict) f k))



         

;; Operators.
(define (<< a n) (arithmetic-shift a n))
(define (>> a n) (arithmetic-shift a (- n)))

(define (not-equal? a b)
  (not (equal? a b)))

(define-syntax (define/return stx)
  (syntax-case stx ()
    [(_ f-params body ...)
     ; =>
     (with-syntax ([return (datum->syntax #'f-params 'return)])
     #'(define f-params (call/ec (λ (return) body ...))))]))
  
(define/return (in? needle haystack)
  (cond
    [(hash? haystack)     (for ([(x y) haystack])
                            (when (equal? x needle)
                              (return #t)))]
    [(py-list? haystack)  (return (in? needle (py-list-mlist haystack)))]
    [else                 (for ([x haystack])
                            (when (equal? x needle) 
                              (return #t)))])
  #f)
        
(define not-in? (λ (needle haystack) (not (in? needle haystack))))


;; Special variables
(define None 'None)
(define Ellipsis 'Ellipsis)



;; Variable mutation:
(define-syntax set-then!
  (syntax-rules ()
    [(_ var exp next)
     (begin
       (set! var exp)
       next)]))



;; Library functions.

(define bitwise-or bitwise-ior)

(define (py-object->string o)
  
  (define (commas seq)
    (define first? #t)
    (define ans "")
    (for ([c seq])
      (when (not first?)
        (set! ans (string-append ans ", ")))
      (when first?
        (set! first? #f))
      (set! ans (string-append ans (py-object->string c))))
    ans)
    
  (define (keyvals seq)
    (define first? #t)
    (define ans "")
    (for ([(k v) seq])
      (when (not first?)
        (set! ans (string-append ans ", ")))
      (when first?
        (set! first? #f))
      (set! ans (string-append ans (py-object->string k) ": " (py-object->string v))))
    ans)
    
  
  (cond
    [(py-list? o)   (format "[~a]" (commas (py-list-mlist o)))]
    [(tuple? o)     (format "(~a)" (commas o))]
    [(dict? o)      (format "{~a}" (keyvals o))]
    [(string? o)    (format "~v" o)] 
    [else           (format "~a" o)]))

(define (py-print x) 
  (cond 
    [(string? x)  (display x)]
    [else         (display (py-object->string x))])
  (newline))


;; CPS-ify primitives:
(define (cps proc)
  (λ args
    (match args
      [`(,real-args ... ,cont)
       (cont (apply proc real-args))])))

; -- 

(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 ((lambda ($old-handler k16)
    ((lambda ($old-return k17)
       ((lambda ($old-continue k18)
          ((lambda ($old-break k19)
             ((lambda (return k20)
                ((lambda (continue k21)
                   ((lambda (break k22)
                      ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
                       (lambda ($ec17 k23)
                         (set-then!
                          $current-handler
                          (lambda ($ex16 k24)
                            (set-then!
                             $current-handler
                             $old-handler
                             ((lambda (ex k25)
                                ((lambda (k26) ((cps py-print) "Good!" k26))
                                 k25))
                              $ex16
                              (lambda (rv27) ($ec17 rv27 k24)))))
                          ((lambda (k29)
                             ((lambda ($old-handler k30)
                                ((lambda ($old-return k31)
                                   ((lambda ($old-continue k32)
                                      ((lambda ($old-break k33)
                                         ((lambda (return k34)
                                            ((lambda (continue k35)
                                               ((lambda (break k36)
                                                  ((lambda (f cc)
                                                     (f
                                                      (lambda (x k) (cc x))
                                                      cc))
                                                   (lambda ($ec19 k37)
                                                     (set-then!
                                                      $current-handler
                                                      (lambda ($ex18 k38)
                                                        (set-then!
                                                         $current-handler
                                                         $old-handler
                                                         ((lambda (ex k39)
                                                            ((lambda (k40)
                                                               ($current-handler
                                                                g$Exception
                                                                k40))
                                                             k39))
                                                          $ex18
                                                          (lambda (rv41)
                                                            ($ec19
                                                             rv41
                                                             k38)))))
                                                      ((lambda (k43)
                                                         ((lambda ($old-handler
                                                                   k44)
                                                            ((lambda ($old-return
                                                                      k45)
                                                               ((lambda ($old-continue
                                                                         k46)
                                                                  ((lambda ($old-break
                                                                            k47)
                                                                     ((lambda (return
                                                                               k48)
                                                                        ((lambda (continue
                                                                                  k49)
                                                                           ((lambda (break
                                                                                     k50)
                                                                              ((lambda (f
                                                                                        cc)
                                                                                 (f
                                                                                  (lambda (x
                                                                                           k)
                                                                                    (cc
                                                                                     x))
                                                                                  cc))
                                                                               (lambda ($ec21
                                                                                        k51)
                                                                                 (set-then!
                                                                                  $current-handler
                                                                                  (lambda ($ex20
                                                                                           k52)
                                                                                    (set-then!
                                                                                     $current-handler
                                                                                     $old-handler
                                                                                     ((lambda (ex
                                                                                               k53)
                                                                                        ((lambda (k54)
                                                                                           ($current-handler
                                                                                            g$Exception
                                                                                            k54))
                                                                                         k53))
                                                                                      $ex20
                                                                                      (lambda (rv55)
                                                                                        ($ec21
                                                                                         rv55
                                                                                         k52)))))
                                                                                  ((lambda (k57)
                                                                                     ((cps
                                                                                       py-print)
                                                                                      "Begin..."
                                                                                      (lambda (rv58)
                                                                                        ($current-handler
                                                                                         g$Exception
                                                                                         k57))))
                                                                                   (lambda (rv59)
                                                                                     ((lambda (rv
                                                                                               k56)
                                                                                        (set-then!
                                                                                         $current-handler
                                                                                         $old-handler
                                                                                         (k56
                                                                                          rv)))
                                                                                      rv59
                                                                                      k51)))))
                                                                               k50))
                                                                            (lambda (k60)
                                                                              (set-then!
                                                                               $current-handler
                                                                               $old-handler
                                                                               ($old-break
                                                                                (void)
                                                                                k60)))
                                                                            k49))
                                                                         (lambda (k61)
                                                                           (set-then!
                                                                            $current-handler
                                                                            $old-handler
                                                                            ($old-continue
                                                                             (void)
                                                                             k61)))
                                                                         k48))
                                                                      (lambda (rv
                                                                               k62)
                                                                        (set-then!
                                                                         $current-handler
                                                                         $old-handler
                                                                         (return
                                                                          rv
                                                                          k62)))
                                                                      k47))
                                                                   break
                                                                   k46))
                                                                continue
                                                                k45))
                                                             return
                                                             k44))
                                                          $current-handler
                                                          k43))
                                                       (lambda (rv63)
                                                         ((lambda (rv k42)
                                                            (set-then!
                                                             $current-handler
                                                             $old-handler
                                                             (k42 rv)))
                                                          rv63
                                                          k37)))))
                                                   k36))
                                                (lambda (k64)
                                                  (set-then!
                                                   $current-handler
                                                   $old-handler
                                                   ($old-break (void) k64)))
                                                k35))
                                             (lambda (k65)
                                               (set-then!
                                                $current-handler
                                                $old-handler
                                                ($old-continue (void) k65)))
                                             k34))
                                          (lambda (rv k66)
                                            (set-then!
                                             $current-handler
                                             $old-handler
                                             (return rv k66)))
                                          k33))
                                       break
                                       k32))
                                    continue
                                    k31))
                                 return
                                 k30))
                              $current-handler
                              k29))
                           (lambda (rv67)
                             ((lambda (rv k28)
                                (set-then!
                                 $current-handler
                                 $old-handler
                                 (k28 rv)))
                              rv67
                              k23)))))
                       k22))
                    (lambda (k68)
                      (set-then!
                       $current-handler
                       $old-handler
                       ($old-break (void) k68)))
                    k21))
                 (lambda (k69)
                   (set-then!
                    $current-handler
                    $old-handler
                    ($old-continue (void) k69)))
                 k20))
              (lambda (rv k70)
                (set-then! $current-handler $old-handler (return rv k70)))
              k19))
           break
           k18))
        continue
        k17))
     return
     k16))
  $current-handler
  $halt))
