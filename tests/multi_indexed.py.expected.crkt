#lang racket

(require racket/mpair)

(define-syntax (program stx)
  (syntax-case stx ()
    [(_ defs ... exp)
     (with-syntax ([$halt (datum->syntax #'exp '$halt)])
       #'(call/ec (λ ($halt) defs ... exp)))]))



;; Data structures.
(define-syntax dict
  (syntax-rules ()
    [(_ (k v) ...)
     ; =>
     (make-hash (list (cons k v) ...))]))

(define dict? hash?)
(define dict-ref hash-ref)
(define dict-set! hash-set!)

(define-syntax tuple
  (syntax-rules ()
    [(_ v ...)
     ; =>
     (vector v ...)]))

(define tuple-ref vector-ref)
(define tuple-set! vector-set!)
(define tuple? vector?)


(define (mlist-set! mlst n value)
  (cond
    [(null? mlst)  (error "mlist-set! -- index too high")]
    [(= n 0)       (set-mcar! mlst value)]
    [else          (mlist-set! (mcdr mlst) (- n 1) value)]))

(define (mlist-remove! mlst n)
  (cond
    [(null? mlist) (error "cannot delete from empty list")]
    [(= n 1)       (set-mcdr! mlst (mcdr (mcdr mlst)))]
    [else          (mlist-remove! (mcdr mlst) (- n 1))]))

     
(define-struct py-list ([mlist #:mutable]))

(define (py-list-set! pl i val)
  (mlist-set! (py-list-mlist pl) i val))

(define (py-list-ref pl i)
  (mlist-ref (py-list-mlist pl) i))

(define (py-list-remove! pl i)
  (cond
    [(< i 0)  (error "index out of bounds for removal")]
    [(= i 0)  (set-py-list-mlist! (mcdr (py-list-mlist pl)))]
    [else     (mlist-remove! (py-list-mlist pl) i)]))
     
(define (py-list* . args)
  (py-list (list->mlist args)))

;; Iterators.
(define (for-list-k lst f k)
  (letrec ([loop (λ (lst)
    (if (null? lst)
        (k (void))
        (f (car lst) (λ (_)
          (loop (cdr lst))))))])
    (loop lst)))
  
(define (set->list set)
  (for/list ([v set]) v))

(define (tuple->list tuple)
  (for/list ([v tuple]) v))

(define (py-list->list lst)
  (for/list ([v (py-list-mlist lst)]) v))

(define (dict->keys dict)
  (for ([(k _) dict]) k))


(define (for-set-k set f k)
  (for-list-k (set->list set) f k))
  
(define (for-tuple-k tuple f k)
  (for-list-k (tuple->list tuple) f k))
  
(define (for-py-list-k py-list f k)
  (for-list-k (py-list->list py-list) f k))

(define (for-dict-k dict f k)
  (for-list-k (dict->keys dict) f k))



         

;; Operators.
(define (<< a n) (arithmetic-shift a n))
(define (>> a n) (arithmetic-shift a (- n)))

(define (not-equal? a b)
  (not (equal? a b)))

(define-syntax (define/return stx)
  (syntax-case stx ()
    [(_ f-params body ...)
     ; =>
     (with-syntax ([return (datum->syntax #'f-params 'return)])
     #'(define f-params (call/ec (λ (return) body ...))))]))
  
(define/return (in? needle haystack)
  (cond
    [(hash? haystack)     (for ([(x y) haystack])
                            (when (equal? x needle)
                              (return #t)))]
    [(py-list? haystack)  (return (in? needle (py-list-mlist haystack)))]
    [else                 (for ([x haystack])
                            (when (equal? x needle) 
                              (return #t)))])
  #f)
        
(define not-in? (λ (needle haystack) (not (in? needle haystack))))


;; Special variables
(define None 'None)
(define Ellipsis 'Ellipsis)



;; Variable mutation:
(define-syntax set-then!
  (syntax-rules ()
    [(_ var exp next)
     (begin
       (set! var exp)
       next)]))



;; Library functions.

(define bitwise-or bitwise-ior)

(define (py-object->string o)
  
  (define (commas seq)
    (define first? #t)
    (define ans "")
    (for ([c seq])
      (when (not first?)
        (set! ans (string-append ans ", ")))
      (when first?
        (set! first? #f))
      (set! ans (string-append ans (py-object->string c))))
    ans)
    
  (define (keyvals seq)
    (define first? #t)
    (define ans "")
    (for ([(k v) seq])
      (when (not first?)
        (set! ans (string-append ans ", ")))
      (when first?
        (set! first? #f))
      (set! ans (string-append ans (py-object->string k) ": " (py-object->string v))))
    ans)
    
  
  (cond
    [(py-list? o)   (format "[~a]" (commas (py-list-mlist o)))]
    [(tuple? o)     (format "(~a)" (commas o))]
    [(dict? o)      (format "{~a}" (keyvals o))]
    [(string? o)    (format "~v" o)] 
    [else           (format "~a" o)]))

(define (py-print x) 
  (cond 
    [(string? x)  (display x)]
    [else         (display (py-object->string x))])
  (newline))


;; CPS-ify primitives:
(define (cps proc)
  (λ args
    (match args
      [`(,real-args ... ,cont)
       (cont (apply proc real-args))])))

; -- 

(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define g$x (void))
 (set-then!
  g$x
  (py-list* (py-list* (py-list* 5)))
  ((lambda (e17 k26)
     ((lambda (i16 k27)
        ((cps py-list?)
         e17
         (lambda (rv28)
           (if rv28
             ((cps py-list-ref) e17 i16 k27)
             ((cps tuple?)
              e17
              (lambda (rv29)
                (if rv29
                  ((cps tuple-ref) e17 i16 k27)
                  ((cps dict?)
                   e17
                   (lambda (rv30)
                     (if rv30
                       ((cps dict-ref) e17 i16 k27)
                       (error "cannot index object" k27)))))))))))
      0
      k26))
   g$x
   (lambda (rv31)
     ((lambda (e19 k21)
        ((lambda (i18 k22)
           ((cps py-list?)
            e19
            (lambda (rv23)
              (if rv23
                ((cps py-list-ref) e19 i18 k22)
                ((cps tuple?)
                 e19
                 (lambda (rv24)
                   (if rv24
                     ((cps tuple-ref) e19 i18 k22)
                     ((cps dict?)
                      e19
                      (lambda (rv25)
                        (if rv25
                          ((cps dict-ref) e19 i18 k22)
                          (error "cannot index object" k22)))))))))))
         0
         k21))
      rv31
      (lambda (rv32)
        ((lambda (e21 k16)
           ((lambda (i20 k17)
              ((cps py-list?)
               e21
               (lambda (rv18)
                 (if rv18
                   ((cps py-list-ref) e21 i20 k17)
                   ((cps tuple?)
                    e21
                    (lambda (rv19)
                      (if rv19
                        ((cps tuple-ref) e21 i20 k17)
                        ((cps dict?)
                         e21
                         (lambda (rv20)
                           (if rv20
                             ((cps dict-ref) e21 i20 k17)
                             (error "cannot index object" k17)))))))))))
            0
            k16))
         rv32
         (lambda (rv33) ((cps py-print) rv33 $halt)))))))))
