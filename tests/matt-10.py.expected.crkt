#lang racket

(require racket/mpair)

(define-syntax (program stx)
  (syntax-case stx ()
    [(_ defs ... exp)
     (with-syntax ([$halt (datum->syntax #'exp '$halt)])
       #'(call/ec (λ ($halt) defs ... exp)))]))



;; Data structures.
(define-syntax dict
  (syntax-rules ()
    [(_ (k v) ...)
     ; =>
     (make-hash (list (cons k v) ...))]))

(define dict? hash?)
(define dict-ref hash-ref)
(define dict-set! hash-set!)

(define-syntax tuple
  (syntax-rules ()
    [(_ v ...)
     ; =>
     (vector v ...)]))

(define tuple-ref vector-ref)
(define tuple-set! vector-set!)
(define tuple? vector?)


(define (mlist-set! mlst n value)
  (cond
    [(null? mlst)  (error "mlist-set! -- index too high")]
    [(= n 0)       (set-mcar! mlst value)]
    [else          (mlist-set! (mcdr mlst) (- n 1) value)]))

(define (mlist-remove! mlst n)
  (cond
    [(null? mlist) (error "cannot delete from empty list")]
    [(= n 1)       (set-mcdr! mlst (mcdr (mcdr mlst)))]
    [else          (mlist-remove! (mcdr mlst) (- n 1))]))

     
(define-struct py-list ([mlist #:mutable]))

(define (py-list-set! pl i val)
  (mlist-set! (py-list-mlist pl) i val))

(define (py-list-ref pl i)
  (mlist-ref (py-list-mlist pl) i))

(define (py-list-remove! pl i)
  (cond
    [(< i 0)  (error "index out of bounds for removal")]
    [(= i 0)  (set-py-list-mlist! (mcdr (py-list-mlist pl)))]
    [else     (mlist-remove! (py-list-mlist pl) i)]))
     
(define (py-list* . args)
  (py-list (list->mlist args)))

;; Iterators.
(define (for-list-k lst f k)
  (letrec ([loop (λ (lst)
    (if (null? lst)
        (k (void))
        (f (car lst) (λ (_)
          (loop (cdr lst))))))])
    (loop lst)))
  
(define (set->list set)
  (for/list ([v set]) v))

(define (tuple->list tuple)
  (for/list ([v tuple]) v))

(define (py-list->list lst)
  (for/list ([v (py-list-mlist lst)]) v))

(define (dict->keys dict)
  (for ([(k _) dict]) k))


(define (for-set-k set f k)
  (for-list-k (set->list set) f k))
  
(define (for-tuple-k tuple f k)
  (for-list-k (tuple->list tuple) f k))
  
(define (for-py-list-k py-list f k)
  (for-list-k (py-list->list py-list) f k))

(define (for-dict-k dict f k)
  (for-list-k (dict->keys dict) f k))



         

;; Operators.
(define (<< a n) (arithmetic-shift a n))
(define (>> a n) (arithmetic-shift a (- n)))

(define (not-equal? a b)
  (not (equal? a b)))

(define-syntax (define/return stx)
  (syntax-case stx ()
    [(_ f-params body ...)
     ; =>
     (with-syntax ([return (datum->syntax #'f-params 'return)])
     #'(define f-params (call/ec (λ (return) body ...))))]))
  
(define/return (in? needle haystack)
  (cond
    [(hash? haystack)     (for ([(x y) haystack])
                            (when (equal? x needle)
                              (return #t)))]
    [(py-list? haystack)  (return (in? needle (py-list-mlist haystack)))]
    [else                 (for ([x haystack])
                            (when (equal? x needle) 
                              (return #t)))])
  #f)
        
(define not-in? (λ (needle haystack) (not (in? needle haystack))))


;; Special variables
(define None 'None)
(define Ellipsis 'Ellipsis)



;; Variable mutation:
(define-syntax set-then!
  (syntax-rules ()
    [(_ var exp next)
     (begin
       (set! var exp)
       next)]))



;; Library functions.

(define bitwise-or bitwise-ior)

(define (py-object->string o)
  
  (define (commas seq)
    (define first? #t)
    (define ans "")
    (for ([c seq])
      (when (not first?)
        (set! ans (string-append ans ", ")))
      (when first?
        (set! first? #f))
      (set! ans (string-append ans (py-object->string c))))
    ans)
    
  (define (keyvals seq)
    (define first? #t)
    (define ans "")
    (for ([(k v) seq])
      (when (not first?)
        (set! ans (string-append ans ", ")))
      (when first?
        (set! first? #f))
      (set! ans (string-append ans (py-object->string k) ": " (py-object->string v))))
    ans)
    
  
  (cond
    [(py-list? o)   (format "[~a]" (commas (py-list-mlist o)))]
    [(tuple? o)     (format "(~a)" (commas o))]
    [(dict? o)      (format "{~a}" (keyvals o))]
    [(string? o)    (format "~v" o)] 
    [else           (format "~a" o)]))

(define (py-print x) 
  (cond 
    [(string? x)  (display x)]
    [else         (display (py-object->string x))])
  (newline))


;; CPS-ify primitives:
(define (cps proc)
  (λ args
    (match args
      [`(,real-args ... ,cont)
       (cont (apply proc real-args))])))

; -- 

(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define g$f (void))
 (define g$g (void))
 (define g$a (void))
 (set-then!
  g$f
  (lambda (k16)
    ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
     (lambda (return k17)
       ((lambda (k18)
          ((cps py-print) "called f" (lambda (rv19) (return 1 k18))))
        k17))
     k16))
  (set-then!
   g$g
   (lambda (k20)
     ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
      (lambda (return k21)
        ((lambda (k22)
           ((cps py-print) "called g" (lambda (rv23) (return 0 k22))))
         k21))
      k20))
   (set-then!
    g$a
    (py-list* (py-list* 10 20) (py-list* 30 40) (py-list* 50 60))
    ((lambda (e17 k40)
       (g$f
        (lambda (rv45)
          ((lambda (i16 k41)
             ((cps py-list?)
              e17
              (lambda (rv42)
                (if rv42
                  ((cps py-list-ref) e17 i16 k41)
                  ((cps tuple?)
                   e17
                   (lambda (rv43)
                     (if rv43
                       ((cps tuple-ref) e17 i16 k41)
                       ((cps dict?)
                        e17
                        (lambda (rv44)
                          (if rv44
                            ((cps dict-ref) e17 i16 k41)
                            (error "cannot index object" k41)))))))))))
           rv45
           k40))))
     g$a
     (lambda (rv46)
       ((lambda (b19 k24)
          (g$g
           (lambda (rv39)
             ((lambda (i18 k25)
                ((lambda (e22 k33)
                   ((lambda (i21 k34)
                      ((cps py-list?)
                       e22
                       (lambda (rv35)
                         (if rv35
                           ((cps py-list-ref) e22 i21 k34)
                           ((cps tuple?)
                            e22
                            (lambda (rv36)
                              (if rv36
                                ((cps tuple-ref) e22 i21 k34)
                                ((cps dict?)
                                 e22
                                 (lambda (rv37)
                                   (if rv37
                                     ((cps dict-ref) e22 i21 k34)
                                     (error
                                      "cannot index object"
                                      k34)))))))))))
                    i18
                    k33))
                 b19
                 (lambda (rv38)
                   ((lambda (v20 k26)
                      ((cps tuple?)
                       b19
                       (lambda (rv27)
                         (if rv27
                           ((cps +)
                            v20
                            30
                            (lambda (rv28)
                              ((cps tuple-set!) b19 i18 rv28 k26)))
                           ((cps py-list?)
                            b19
                            (lambda (rv29)
                              (if rv29
                                ((cps +)
                                 v20
                                 30
                                 (lambda (rv30)
                                   ((cps py-list-set!) b19 i18 rv30 k26)))
                                ((cps dict?)
                                 b19
                                 (lambda (rv31)
                                   (if rv31
                                     ((cps +)
                                      v20
                                      30
                                      (lambda (rv32)
                                        ((cps dict-set!) b19 i18 rv32 k26)))
                                     (k26 (void))))))))))))
                    rv38
                    k25))))
              rv39
              k24))))
        rv46
        (lambda (rv47)
          ((lambda (e24 k48)
             (g$f
              (lambda (rv53)
                ((lambda (i23 k49)
                   ((cps py-list?)
                    e24
                    (lambda (rv50)
                      (if rv50
                        ((cps py-list-ref) e24 i23 k49)
                        ((cps tuple?)
                         e24
                         (lambda (rv51)
                           (if rv51
                             ((cps tuple-ref) e24 i23 k49)
                             ((cps dict?)
                              e24
                              (lambda (rv52)
                                (if rv52
                                  ((cps dict-ref) e24 i23 k49)
                                  (error "cannot index object" k49)))))))))))
                 rv53
                 k48))))
           g$a
           (lambda (rv54) ((cps py-print) rv54 $halt)))))))))))
