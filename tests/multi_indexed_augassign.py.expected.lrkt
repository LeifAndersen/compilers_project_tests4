#lang racket

(require racket/mpair)

(define-syntax program
  (syntax-rules ()
    [(_ body ...) (let () body ...)]))



;; Data structures.
(define-syntax dict
  (syntax-rules ()
    [(_ (k v) ...)
     ; =>
     (make-hash (list (cons k v) ...))]))

(define dict? hash?)
(define dict-ref hash-ref)
(define dict-set! hash-set!)

(define-syntax tuple
  (syntax-rules ()
    [(_ v ...)
     ; =>
     (vector v ...)]))

(define tuple-ref vector-ref)
(define tuple-set! vector-set!)
(define tuple? vector?)


(define (mlist-set! mlst n value)
  (cond
    [(null? mlst)  (error "mlist-set! -- index too high")]
    [(= n 0)       (set-mcar! mlst value)]
    [else          (mlist-set! (mcdr mlst) (- n 1) value)]))

(define (mlist-remove! mlst n)
  (cond
    [(null? mlist) (error "cannot delete from empty list")]
    [(= n 1)       (set-mcdr! mlst (mcdr (mcdr mlst)))]
    [else          (mlist-remove! (mcdr mlst) (- n 1))]))

     
(define-struct py-list ([mlist #:mutable]))

(define (py-list-set! pl i val)
  (mlist-set! (py-list-mlist pl) i val))

(define (py-list-ref pl i)
  (mlist-ref (py-list-mlist pl) i))

(define (py-list-remove! pl i)
  (cond
    [(< i 0)  (error "index out of bounds for removal")]
    [(= i 0)  (set-py-list-mlist! (mcdr (py-list-mlist pl)))]
    [else     (mlist-remove! (py-list-mlist pl) i)]))
     
(define (py-list* . args)
  (py-list (list->mlist args)))

;; Iterators.
(define (for-set set f)
  (for ([v set])
    (f v)))

(define (for-tuple tuple f)
  (for ([v tuple])
    (f v)))

(define (for-py-list lst f)
  (for ([v (py-list-mlist lst)])
    (f v)))

(define (for-dict dict f)
  (for ([(v _) dict])
    (f v)))


;; Objects.
(define-syntax get-field 
  (syntax-rules ()
    [(_ obj name) (error "get-field not supported")]))

(define-syntax set-field!
  (syntax-rules ()
    [(_ obj name val) (error "set-field! not supported")]))

(define-syntax remove-field!
  (syntax-rules ()
    [(_ obj name) (error "remove-field! not supported")]))
         

;; Operators.
(define (<< a n) (arithmetic-shift a n))
(define (>> a n) (arithmetic-shift a (- n)))

(define (not-equal? a b)
  (not (equal? a b)))

(define-syntax (define/return stx)
  (syntax-case stx ()
    [(_ f-params body ...)
     ; =>
     (with-syntax ([return (datum->syntax #'f-params 'return)])
     #'(define f-params (call/ec (λ (return) body ...))))]))
  
(define/return (in? needle haystack)
  (cond
    [(hash? haystack)     (for ([(x y) haystack])
                            (when (equal? x needle)
                              (return #t)))]
    [(py-list? haystack)  (return (in? needle (py-list-mlist haystack)))]
    [else                 (for ([x haystack])
                            (when (equal? x needle) 
                              (return #t)))])
  #f)
        
(define not-in? (λ (needle haystack) (not (in? needle haystack))))


;; Special variables
(define None 'None)
(define Ellipsis 'Ellipsis)



;; Library functions.

(define bitwise-or bitwise-ior)

(define (py-object->string o)
  
  (define (commas seq)
    (define first? #t)
    (define ans "")
    (for ([c seq])
      (when (not first?)
        (set! ans (string-append ans ", ")))
      (when first?
        (set! first? #f))
      (set! ans (string-append ans (py-object->string c))))
    ans)
    
  (define (keyvals seq)
    (define first? #t)
    (define ans "")
    (for ([(k v) seq])
      (when (not first?)
        (set! ans (string-append ans ", ")))
      (when first?
        (set! first? #f))
      (set! ans (string-append ans (py-object->string k) ": " (py-object->string v))))
    ans)
    
  
  (cond
    [(py-list? o)   (format "[~a]" (commas (py-list-mlist o)))]
    [(tuple? o)     (format "(~a)" (commas o))]
    [(dict? o)      (format "{~a}" (keyvals o))]
    [(string? o)    (format "~v" o)] 
    [else           (format "~a" o)]))

(define (py-print x) 
  (cond 
    [(string? x)  (display x)]
    [else         (display (py-object->string x))])
  (newline))

; -- 

(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define g$x (void))
 (begin
   (set! g$x (py-list* (py-list* (py-list* 5))))
   ((lambda (b21)
      (begin
        ((lambda (i20)
           (begin
             ((lambda (v22)
                (begin
                  (if (tuple? b21)
                    (tuple-set!
                     b21
                     i20
                     (+
                      v22
                      (*
                       100
                       ((lambda (e30)
                          (begin
                            ((lambda (i29)
                               (begin
                                 (if (py-list? e30)
                                   (py-list-ref e30 i29)
                                   (if (tuple? e30)
                                     (tuple-ref e30 i29)
                                     (if (dict? e30)
                                       (dict-ref e30 i29)
                                       (error "cannot index object"))))))
                             0)))
                        ((lambda (e28)
                           (begin
                             ((lambda (i27)
                                (begin
                                  (if (py-list? e28)
                                    (py-list-ref e28 i27)
                                    (if (tuple? e28)
                                      (tuple-ref e28 i27)
                                      (if (dict? e28)
                                        (dict-ref e28 i27)
                                        (error "cannot index object"))))))
                              0)))
                         ((lambda (e26)
                            (begin
                              ((lambda (i25)
                                 (begin
                                   (if (py-list? e26)
                                     (py-list-ref e26 i25)
                                     (if (tuple? e26)
                                       (tuple-ref e26 i25)
                                       (if (dict? e26)
                                         (dict-ref e26 i25)
                                         (error "cannot index object"))))))
                               0)))
                          g$x))))))
                    (if (py-list? b21)
                      (py-list-set!
                       b21
                       i20
                       (+
                        v22
                        (*
                         100
                         ((lambda (e36)
                            (begin
                              ((lambda (i35)
                                 (begin
                                   (if (py-list? e36)
                                     (py-list-ref e36 i35)
                                     (if (tuple? e36)
                                       (tuple-ref e36 i35)
                                       (if (dict? e36)
                                         (dict-ref e36 i35)
                                         (error "cannot index object"))))))
                               0)))
                          ((lambda (e34)
                             (begin
                               ((lambda (i33)
                                  (begin
                                    (if (py-list? e34)
                                      (py-list-ref e34 i33)
                                      (if (tuple? e34)
                                        (tuple-ref e34 i33)
                                        (if (dict? e34)
                                          (dict-ref e34 i33)
                                          (error "cannot index object"))))))
                                0)))
                           ((lambda (e32)
                              (begin
                                ((lambda (i31)
                                   (begin
                                     (if (py-list? e32)
                                       (py-list-ref e32 i31)
                                       (if (tuple? e32)
                                         (tuple-ref e32 i31)
                                         (if (dict? e32)
                                           (dict-ref e32 i31)
                                           (error "cannot index object"))))))
                                 0)))
                            g$x))))))
                      (if (dict? b21)
                        (dict-set!
                         b21
                         i20
                         (+
                          v22
                          (*
                           100
                           ((lambda (e42)
                              (begin
                                ((lambda (i41)
                                   (begin
                                     (if (py-list? e42)
                                       (py-list-ref e42 i41)
                                       (if (tuple? e42)
                                         (tuple-ref e42 i41)
                                         (if (dict? e42)
                                           (dict-ref e42 i41)
                                           (error "cannot index object"))))))
                                 0)))
                            ((lambda (e40)
                               (begin
                                 ((lambda (i39)
                                    (begin
                                      (if (py-list? e40)
                                        (py-list-ref e40 i39)
                                        (if (tuple? e40)
                                          (tuple-ref e40 i39)
                                          (if (dict? e40)
                                            (dict-ref e40 i39)
                                            (error "cannot index object"))))))
                                  0)))
                             ((lambda (e38)
                                (begin
                                  ((lambda (i37)
                                     (begin
                                       (if (py-list? e38)
                                         (py-list-ref e38 i37)
                                         (if (tuple? e38)
                                           (tuple-ref e38 i37)
                                           (if (dict? e38)
                                             (dict-ref e38 i37)
                                             (error "cannot index object"))))))
                                   0)))
                              g$x))))))
                        (void))))))
              ((lambda (e24)
                 (begin
                   ((lambda (i23)
                      (begin
                        (if (py-list? e24)
                          (py-list-ref e24 i23)
                          (if (tuple? e24)
                            (tuple-ref e24 i23)
                            (if (dict? e24)
                              (dict-ref e24 i23)
                              (error "cannot index object"))))))
                    i20)))
               b21))))
         0)))
    ((lambda (e19)
       (begin
         ((lambda (i18)
            (begin
              (if (py-list? e19)
                (py-list-ref e19 i18)
                (if (tuple? e19)
                  (tuple-ref e19 i18)
                  (if (dict? e19)
                    (dict-ref e19 i18)
                    (error "cannot index object"))))))
          0)))
     ((lambda (e17)
        (begin
          ((lambda (i16)
             (begin
               (if (py-list? e17)
                 (py-list-ref e17 i16)
                 (if (tuple? e17)
                   (tuple-ref e17 i16)
                   (if (dict? e17)
                     (dict-ref e17 i16)
                     (error "cannot index object"))))))
           0)))
      g$x)))
   (py-print g$x)))
